%{
#include <iostream>


int yylex(); 
void yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%start prog

%token LPAREN RPAREN LCURLY RCURLY LSQUARE RSQUARE
%token PLUS MINUS MUL DIV
%token FUNCTION IF VAR FOR RETURN TRUE FALSE NULLTOKEN WHILE TYPEOF
%token COMMA EQUAL AND PIPE DOUBLEPIPE SEMICOLON COLON DOUBLEQUOTES QUESTIONMARK
%token IDENTIFIER APPLYFUNCTION APPLYFUNCTION2 DOT COMMENTS
%token NUM NOT_EQUAL

/* Resolve the ambiguity of the grammar by defining precedence. */

/* Order of directives will determine the precedence. */
%left PLUS MINUS    /* left means left-associativity. */
%left DIV MUL

%%

prog : expression
     ;

expression : expression var expression
    | expression function expression
    |
    ;

var : VAR IDENTIFIER EQUAL FUNCTION IDENTIFIER LPAREN IDENTIFIER RPAREN LCURLY varmiddle RCURLY SEMICOLON
     | VAR IDENTIFIER EQUAL LCURLY varmiddle RCURLY SEMICOLON
     | var function
     | var var
     | VAR IDENTIFIER EQUAL APPLYFUNCTION2 LPAREN RPAREN SEMICOLON 
     ;

varmiddle :varmiddle SEMICOLON varmiddle
     | RETURN IDENTIFIER NOT_EQUAL NULLTOKEN AND IDENTIFIER EQUAL EQUAL EQUAL APPLYFUNCTION
     | varmiddle  COMMA varmiddle
     | IDENTIFIER COLON TRUE
     | IDENTIFIER COLON FALSE
     |
     ;

function :  FUNCTION IDENTIFIER LPAREN agrument RPAREN LCURLY statement RCURLY
    ;

statement : statement SEMICOLON statement
     | statement if statement
     | statement for statement
     | statement while statement
     | IDENTIFIER EQUAL IDENTIFIER DOUBLEPIPE IDENTIFIER
     | IDENTIFIER LSQUARE IDENTIFIER RSQUARE EQUAL IDENTIFIER LSQUARE IDENTIFIER RSQUARE 
     | APPLYFUNCTION LSQUARE IDENTIFIER LSQUARE IDENTIFIER RSQUARE RSQUARE EQUAL IDENTIFIER
     | RETURN IDENTIFIER PLUS DOUBLEQUOTES DOUBLEQUOTES
     | VAR IDENTIFIER
     | IDENTIFIER EQUAL APPLYFUNCTION LPAREN DOUBLEQUOTES IDENTIFIER DOUBLEQUOTES RPAREN
     | APPLYFUNCTION EQUAL IDENTIFIER
     | APPLYFUNCTION2 LPAREN IDENTIFIER RPAREN DOT APPLYFUNCTION LPAREN IDENTIFIER RPAREN
     | IDENTIFIER IDENTIFIER APPLYFUNCTION2 LPAREN RPAREN
     | RETURN TYPEOF IDENTIFIER EQUAL EQUAL EQUAL DOUBLEQUOTES IDENTIFIER DOUBLEQUOTES DOUBLEPIPE TYPEOF IDENTIFIER EQUAL EQUAL EQUAL DOUBLEQUOTES FUNCTION DOUBLEQUOTES QUESTIONMARK IDENTIFIER LSQUARE APPLYFUNCTION LPAREN IDENTIFIER RPAREN RSQUARE DOUBLEPIPE DOUBLEQUOTES IDENTIFIER DOUBLEQUOTES COLON TYPEOF IDENTIFIER
     | VAR IDENTIFIER EQUAL APPLYFUNCTION LPAREN DOUBLEQUOTES PIPE DOUBLEQUOTES RPAREN
     | IDENTIFIER EQUAL APPLYFUNCTION
     | RETURN FUNCTION LPAREN agrument RPAREN LCURLY var statement RCURLY
     | RETURN IDENTIFIER EQUAL EQUAL EQUAL DOUBLEQUOTES IDENTIFIER DOUBLEQUOTES AND APPLYFUNCTION EQUAL EQUAL EQUAL IDENTIFIER
     | VAR IDENTIFIER EQUAL IDENTIFIER AND IDENTIFIER
     | IDENTIFIER EQUAL IDENTIFIER AND APPLYFUNCTION EQUAL EQUAL EQUAL NUM AND APPLYFUNCTION EQUAL EQUAL EQUAL NUM AND APPLYFUNCTION MINUS APPLYFUNCTION
     | RETURN IDENTIFIER
     | RETURN MINUS NUM
     | RETURN IDENTIFIER QUESTIONMARK NUM COLON MINUS NUM
     | COMMENTS
     | SEMICOLON
     |
     ;

if : IF LPAREN condition RPAREN LCURLY statement RCURLY
   ;

condition: IDENTIFIER
    | IDENTIFIER LSQUARE IDENTIFIER RSQUARE
    | IDENTIFIER IDENTIFIER IDENTIFIER
    | IDENTIFIER EQUAL EQUAL NULLTOKEN
    | IDENTIFIER MINUS MINUS
    | IDENTIFIER EQUAL APPLYFUNCTION
    | IDENTIFIER EQUAL EQUAL EQUAL APPLYFUNCTION
    | IDENTIFIER EQUAL EQUAL EQUAL IDENTIFIER
    ;

for : FOR LPAREN condition RPAREN LCURLY statement RCURLY
    ;

while : WHILE LPAREN condition RPAREN LCURLY statement RCURLY
    ;

agrument : agrument COMMA agrument
    | IDENTIFIER
    |
    ;
%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}
